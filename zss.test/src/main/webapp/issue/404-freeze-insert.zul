<zk>
	<vbox width="100%" height="100%">
		<label pre="true">
1. scroll down (by mouse scroll wheel) to row 200
2. select column and insert 1 column
		</label>
		<hlayout>
			<button label="export" onClick="export();"></button>
			<button label="freeze both" onClick="ss.setRowfreeze(1); ss.setColumnfreeze(1);"></button>
			<button label="freeze rows" onClick="ss.setRowfreeze(1);"></button>
			<button label="freeze columns" onClick="ss.setColumnfreeze(1);"></button>
		</hlayout>
		<hlayout>
			<button label="insert columns (left format)" onClick="insert(false, Range.FORMAT_LEFTABOVE);"></button>
			<button label="insert columns (right format)" onClick="insert(false, Range.FORMAT_RIGHTBELOW);"></button>
		</hlayout>
		<hlayout>
			<button label="insert rows (above format)" onClick="insert(true, Range.FORMAT_LEFTABOVE);"></button>
			<button label="insert rows (below format )" onClick="insert(true, Range.FORMAT_RIGHTBELOW);"></button>
		</hlayout>
		<spreadsheet id="ss" src="/issue/blank.xlsx"  hflex="1" vflex="1"
			ctrlKeys="^c^x^v^d^s^o^b^i^u#del^#del^z^y^e"
			maxrows="200" maxcolumns="100"
			showFormulabar="true" showContextMenu="true" showSheetbar="true" showToolbar="true">
		</spreadsheet>
		
		<zscript><![CDATA[
	public void insert(boolean isRow, int copyOrigin) {
		// if you select row but click insert column, it might throw exception about XML bean
		Rect rr = ss.getSelection();
		Range r = Ranges.range(ss.getSelectedSheet(), rr.getTop(), rr.getLeft(), rr.getBottom(),
				rr.getRight());
		if(isRow) {
			r.insert(Range.SHIFT_DEFAULT, copyOrigin);
		} else if(!isRow) {
			r.insert(Range.SHIFT_DEFAULT, copyOrigin);
		}
	}
	public void addData(Worksheet sheet) {
		// text
		for(int r = 0; r < 20; ++r) {
			for(int c = 0; c < 10; ++c) {
				Ranges.range(sheet, r, c).setEditText(String.valueOf(c + (r * 10)));
			}
		}
		Ranges.range(sheet, "CA1").setEditText("CA1");
		Ranges.range(sheet, "CA3").setEditText("CA3");
		Ranges.range(sheet, "CA190").setEditText("CA190");
		Ranges.range(sheet, "A190").setEditText("C190");
		Ranges.range(sheet, "C190").setEditText("C190");
		// style
		String[] colors = {"#CCCCCC", "#FF0000", "#FF00FF", "#00FF00", "#00FFFF", "#0000FF", "#AAAAAA"};
		for(int r = 0; r < 10; ++r) {
			for(int c = 0; c < colors.length; ++c) {
				Range re = Ranges.range(sheet, r, c);
				org.zkoss.zss.ui.impl.Utils.setBackgroundColor(sheet, new Rect(c, r, c, r), colors[c]);
			}
		}
		for(int c = 0; c < 7; ++c) {
			for(int r = 0; r < colors.length; ++r) {
				org.zkoss.zss.ui.impl.Utils.setBackgroundColor(sheet, new Rect(c, r + 10, c, r + 10), colors[r]);
			}
		}
	}
	public void export() throws java.io.IOException {
		Exporter exporter = Exporters.getExporter("excel");
		java.io.ByteArrayOutputStream os = new java.io.ByteArrayOutputStream();
		exporter.export(ss.getBook(), os);
		os.close();
		org.zkoss.zul.Filedownload.save(os.toByteArray(),
				"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "exported.xlsx");
	}

	addData(ss.getSheet(0));
	addData(ss.getSheet(1));
	addData(ss.getSheet(2));
	
	ss.addEventListener(org.zkoss.zss.ui.event.Events.ON_SHEET_SELECT, new org.zkoss.zk.ui.event.EventListener() {
		public void onEvent(Event event) throws Exception {
			String name = ss.getSelectedSheetName();
			if("Sheet1".equals(name) || "Sheet2".equals(name)) {
				ss.setRowfreeze(1);				
			}
			if("Sheet1".equals(name) || "Sheet3".equals(name)) {
				ss.setColumnfreeze(1);				
			}
		}
	});
]]></zscript>
		
		<script defer="true"><![CDATA[
			(function() {
				window.debug = {};
				window.debug.ss = zk.Widget.$('$ss');
				window.debug.ssc = debug.ss.sheetCtrl;
				window.debug.dp = debug.ssc.dp;
				window.debug.cc = debug.ss._cacheCtrl.getSelectedSheet();
			})();
		]]></script>
	</vbox>
</zk>